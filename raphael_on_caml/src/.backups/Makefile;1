BINDIR = $(shell dirname `which ocamlc`)
JOO=js_of_ocaml
JOODIR = $(shell ocamlfind query js_of_ocaml)

####

OCAMLC=ocamlfind ocamlc -package $(JOO) -pp "camlp4o $(JOODIR)/pa_js.cmo"

####

LIBSOURCE=raphael.ml
LIBINTF=$(LIBSOURCE:ml=mli)
LIBOBJ=$(LIBSOURCE:ml=cmo)
LIBIBJ=$(LIBSOURCE:ml=cmi)

LIB=raphael

TESTSOURCE=camltest.ml
TESTOBJ=$(TESTSOURCE:ml=byte)
TESTJS=$(TESTSOURCE:ml=js)

CSOURCE=stubs.c
COBJ=stubs.o

####

all: $(TESTJS)

$(LIB).cma: $(COBJ) $(LIBOBJ)
	  ocamlmklib -o $(LIB) $^

$(TESTJS): $(LIBOBJ) $(COBJ) $(TESTOBJ)
	$(JOO) $(TESTOBJ)

$(TESTOBJ): dll$(LIB).so $(TESTSOURCE)
	$(OCAMLC) -linkpkg -o $@ $^

$(LIBOBJ): $(LIBIBJ)

%.cmo: %.ml
	$(OCAMLC) -g -c $<

%.cmi: %.mli
	$(OCAMLC) -g -c $<

clean::
	rm -f *.cm[io] $(CSOURCE) $(COBJ) $(TESTJS) $(TESTOBJ)

####
#fake stubs generation, borrowed from js_of_ocaml's Makefiles

stubs.c: $(LIBSOURCE)
	(echo "#include <stdlib.h>"; \
	echo "#include <stdio.h>"; \
	echo "#define D(f) void f () { fprintf(stderr, \"Unimplemented Javascript primitive %s!\\\\n\", #f); exit(1); }"; \
	(sed -n -e 's/.*external.*"\([^"%]*\)".*/D(\1)/p' \
	$(LIBSOURCE) | \
	sort | uniq)) \
	> stubs.c

%.o: %.c
	ocamlfind ocamlc -package js_of_ocaml -c $<


