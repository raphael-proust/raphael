let log_success s =
  Firebug.console##log_2 (Js.string "\tSUCCESS: ", Js.string s)
let log_failure s =
  Firebug.console##log_2 (Js.string "\tFAILURE: ", Js.string s)

let log_start s =
  Firebug.console##log_2 (Js.string "START: ", Js.string s)
let log_stop s =
  Firebug.console##log_2 (Js.string "STOP: ", Js.string s)

let raw_log x =
  Firebug.console##log_2 (Js.string "\t\t", x)
let log s = raw_log (Js.string s)






let _ = log_start "Basic test"

let _ =
  Dom_html.window##onload <-
  (Dom_html.handler
    (fun _ ->
      let p = Raphael.raphael
                ((Js.Opt.get
                   (Dom_html.document##body##firstChild)
                   (fun () -> failwith "toto")
                ) :> Dom.node Js.t)
                50 50
      in
      p##rect (10, 10, 30, 30);
      Js.js_false
    )
  )



let _ = log_stop "Basic test"

(* This test is a adaptation from the identical test in pure js *)
(*     <script type="text/javascript"> *)
(*       var variations = [ *)
(*         {stroke: "#000"}, *)
(*         {stroke: "#000", fill: "#000"}, *)
(*         {stroke: "#000", fill: "#000", opacity: .1}, *)
(*         {fill: "#000", stroke: "#f00", "stroke-width": "5px"} *)
(*       ]; *)
(*  *)
(*       function drawPrimitives(target, primitive, x, y, width, height, curve)
 *       { *)
(*         var canvas = Raphael(target, 500, 120); *)
(*         $.each(variations, function(index, variation) { *)
(*           canvas[primitive](x + (index * 110), y, width, height,
(*  *           curve).attr(variation); *) *)
(*         }); *)
(*       } *)
(*  *)
(*       function embedImages(image) { *)
(*         var canvas = Raphael("images", 500, 120); *)
(*         canvas.image(image, 0, 5, 100, 100); *)
(*         canvas.image(image, 110, 5, 100, 100).attr({opacity: "0.75"}); *)
(*         canvas.image(image, 220, 5, 100, 100).attr({opacity: "0.5"}); *)
(*         canvas.image(image, 330, 5, 100, 100).attr({opacity: "0.25"}); *)
(*       } *)
(*  *)
(*       function drawLines(target, method, treatment, x, y, X, Y, width) { *)
(*         var canvas = Raphael(target, 600, 120); *)
(*         $.each(variations, function(index, variation) { *)
(*           canvas.path(variation)[treatment]().moveTo(x + (index *
(*  *           110),y)[method](X,Y, width); *) *)
(*         }); *)
(*       } *)
(*  *)
(*       function drawCurves(target, method, treatment, x, y, x1, y1, x2, y2,
 *       x3, y3) { *)
(*         var canvas = Raphael(target, 600, 120); *)
(*         $.each(variations, function(index, variation) { *)
(*           canvas.path(variation)[treatment]().moveTo(x + (index * 110),
(*  *           y)[method](x1, y1, x2, y2, x3, y3); *) *)
(*         }); *)
(*       } *)
(*  *)
(*       function drawqCurves(target, method, treatment, x, y, x1, y1, x2, y2) {
 *       *)
(*         var canvas = Raphael(target, 600, 120); *)
(*         $.each(variations, function(index, variation) { *)
(*           var c = canvas.path(variation)[treatment]().moveTo(x + (index *
(*  *           110), y)[method](x1, y1, x2, y2); *) *)
(*           alert(c.node.path); *)
(*         }); *)
(*       } *)
(*  *)
(*       window.onload = function () { *)
(*         drawPrimitives("circles", "circle", 50, 55, 50, 50); *)
(*         drawPrimitives("squares", "rect", 0, 5, 100, 100); *)
(*         drawPrimitives("rounded-squares", "rect", 0, 5, 100, 100, 20); *)
(*         drawPrimitives("ellipses", "ellipse", 50, 55, 50, 30); *)
(*         embedImages("image/raphael.png"); *)
(*         drawLines("absolute-line", "lineTo", "absolutely", 5, 5, 100, 100) *)
(*         drawLines("relative-line", "lineTo", "relatively", 5, 5, 100, 100) *)
(*         drawLines("absolute-linec", "cplineTo", "absolutely", 5, 5, 100, 100,
(*  *         50) *) *)
(*         drawLines("relative-linec", "cplineTo", "relatively", 5, 5, 100, 100,
(*  *         50) *) *)
(*         drawCurves("absolute-curve", "curveTo", "absolutely", 5, 5, 10, 30,
(*  *         90, 60, 30, 100) *) *)
(*         drawCurves("relative-curve", "curveTo", "relatively", 5, 5, 10, 30,
(*  *         90, 60, 30, 100) *) *)
(*         drawqCurves("absolute-qcurve", "qcurveTo", "absolutely", 5, 5, 10,
(*  *         50, 90, 100) *) *)
(*         drawqCurves("relative-qcurve", "qcurveTo", "relatively", 5, 5, 10,
(*  *         50, 90, 100) *) *)
(*       }; *)
(*     </script> *)
